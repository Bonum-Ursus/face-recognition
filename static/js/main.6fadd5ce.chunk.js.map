{"version":3,"sources":["Components/Logo/LogoImage.png","Components/Navigation/Navigation.js","Components/Logo/Logo.js","Components/Rank/Rank.js","Components/ImageLinkForm/ImageLinkForm.js","Components/Signin/Signin.js","Components/FaceRecognition/FaceRecognition.js","Components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","paddingTop","alt","src","LogoImage","Rank","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","Signin","id","htmlFor","name","value","FaceRecognition","imageURL","box","top","topRow","right","rightCol","left","leftCol","bottom","Register","app","Clarifai","App","apiKey","particlesOptions","particles","line_linked","shadow","enable","color","blur","number","density","value_area","move","speed","interactivity","events","onclick","mode","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","route","this","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fadd5ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoImage.23055e65.png\";","import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) => {  \r\n    if(isSignedIn){\r\n        return(\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n            </nav>\r\n        );\r\n    }else {\r\n        return(\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n                <p onClick={() => onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n            </nav>\r\n        );     \r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\nimport LogoImage from './LogoImage.png';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 45 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa1\">\r\n                    <img style={{paddingTop: '5px'}} alt='logo' src={LogoImage}/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\n\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className='white f3'>\r\n                {'Your current rank is'}\r\n            </div>\r\n            <div className='white f2'>\r\n                {'#5'}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\r\n    return (\r\n        <div>\r\n            <p className='textP f3'>\r\n                {'Detecting faces on your photo.'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br4 shadow-5'>\r\n                    <input className='center f4 pa2 br3 w-70 bg-transparent hover-bg-black hover-white shadow-3' type='text'  onChange={onInputChange} />\r\n                    <button className='center w-25 grow f4 br3 link ph3 pv2 dib white bg-light-purple'\r\n                    onClick={onButtonSubmit}\r\n                    >Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\n\r\n\r\nconst Signin = ({onRouteChange}) => {\r\n    return (\r\n        <article className=\"br3 shadow-1 b--black-10 mv4 w-100 w-50-m w-25-l mw6 center\">\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f4\" htmlFor=\"email-address\">Email</label>\r\n                            <input className=\"pa2 br3 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f4\" htmlFor=\"password\">Password</label>\r\n                            <input className=\"b br3 pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input \r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b br3 ph3 pv2 input-reset ba b--black bg-transparent grow pointer f4 dib\" \r\n                            type=\"submit\" \r\n                            value=\"Sign in\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p onClick={() => onRouteChange('register')}className=\"f3 link dim black db pointer\">Register</p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\n\r\n\r\nconst FaceRecognition = ({imageURL, box}) => {\r\n    return (\r\n        <div className='center'>\r\n            <div className='absolute mt2'>\r\n                <img id='inputImage' className='image mt2 br4' alt='' src={imageURL}/>\r\n                <div className='bounding-box' \r\n                    style={{top: box.topRow, \r\n                            right: box.rightCol, \r\n                            left: box.leftCol, \r\n                            bottom: box.bottom}}>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\n\r\n\r\nconst Register = ({onRouteChange}) => {\r\n    return (\r\n        <article className=\"br3 shadow-1 b--black-10 mv4 w-100 w-50-m w-25-l mw6 center\">\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f4\" htmlFor=\"name\">Name</label>\r\n                            <input className=\"pa2 br3 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\"  id=\"name\" />\r\n                        </div>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f4\" htmlFor=\"email-address\">Email</label>\r\n                            <input className=\"pa2 br3 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f4\" htmlFor=\"password\">Password</label>\r\n                            <input className=\"b br3 pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input \r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b br3 ph3 pv2 input-reset ba b--black bg-transparent grow pointer f4 dib\" \r\n                            type=\"submit\" \r\n                            value=\"Register\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport Rank from './Components/Rank/Rank';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Signin from './Components/Signin/Signin';\nimport 'tachyons';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'\nimport Register from './Components/Register/Register';\n\nconst app = new Clarifai.App({\n  apiKey: '308c0465acc8444881aeb17341641f49'\n });\nconst particlesOptions = {\n  particles: {\n    line_linked: {\n      shadow: {\n        enable: true,\n        color: \"#3CA9D1\",\n        blur: 4\n      }\n    },\n    number: {\n      value: 100,\n      density:{\n        enable: true,\n        value_area: 1000\n      }\n    },\n    move: {\n      speed:3\n    }\n  },\n  interactivity: {\n    events:{\n      onclick: {\n        enable: true,\n        mode: 'push'\n        }\n      }\n  } \n};\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageURL: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottom: height - (clarifaiFace.bottom_row * height)\n    \n    }\n  }\n// https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQlIGlYgQzCtfNqvfB6A27prEg3xrgx3_H9mulYHr-6q0wwpob5\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value})\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageURL: this.state.input});\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL, \n        this.state.input)\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if(route === 'signout'){\n      this.setState({isSignedIn: 'false'});\n    }else if(route === 'home'){\n      this.setState({isSignedIn: 'true'});\n    }\n    this.setState({route: route});\n\n  }\n\n  render(){\n    const {isSignedIn, imageURL, box, route} = this.state;\n    return (\n      <div className=\"App\">\n        <Particles className='particles' \n        params={particlesOptions}/> \n        <Navigation \n          isSignedIn={isSignedIn}\n          className='component'\n          onRouteChange={this.onRouteChange}/>      \n          { \n            route === 'home' \n            ? <div>\n                <Logo className='component' />\n                <Rank className='component' />\n                <ImageLinkForm \n                  className='component'\n                  onInputChange={this.onInputChange} \n                  onButtonSubmit={this.onButtonSubmit}/>\n                <FaceRecognition \n                  className='component'\n                  box={box} \n                  imageURL={imageURL}/>\n              </div> \n            : (\n              route === 'signin'\n              ? <Signin className='component' onRouteChange={this.onRouteChange}/>\n              : <Register className='component' onRouteChange={this.onRouteChange}/> \n              )                       \n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}