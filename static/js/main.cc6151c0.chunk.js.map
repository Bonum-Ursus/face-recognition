{"version":3,"sources":["Components/Logo/LogoImage.png","Components/Navigation/Navigation.js","Components/Logo/Logo.js","Components/Rank/Rank.js","Components/ImageLinkForm/ImageLinkForm.js","Components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","className","Logo","options","max","height","width","paddingTop","alt","src","LogoImage","Rank","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageURL","app","Clarifai","App","apiKey","particlesOptions","particles","line_linked","shadow","enable","color","blur","number","value","density","value_area","move","speed","interactivity","events","onclick","mode","event","setState","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","outputs","data","regions","region_info","bounding_box","err","classname","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,uC,yQCU5BC,EARI,WACf,OACI,yBAAKC,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC1C,uBAAGC,UAAU,2CAAb,c,0CCYGC,EAZF,WACT,OACI,yBAAKD,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBE,QAAS,CAAEC,IAAM,IAAMN,MAAO,CAAEO,OAAQ,IAAKC,MAAO,MACpF,yBAAKL,UAAU,kBACX,yBAAKH,MAAO,CAACS,WAAY,OAAQC,IAAI,OAAOC,IAAKC,UCOtDC,EAbF,WACT,OACI,6BACI,yBAAKV,UAAU,YACV,wBAEL,yBAAKA,UAAU,YACV,QCWFW,G,MAlBO,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,eACnC,OACI,6BACI,uBAAGb,UAAU,YACR,kCAEL,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,yBAAyBc,KAAK,OAAQC,SAAUH,IACjE,4BAAQZ,UAAU,iEAClBgB,QAASH,GADT,e,kDCALI,G,MARS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACI,yBAAKlB,UAAU,UACX,yBAAKA,UAAU,YAAYO,IAAI,GAAGC,IAAKU,OCG7CC,EAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQ,qCAEJC,EAAmB,CACvBC,UAAW,CACTC,YAAa,CACXC,OAAQ,CACNC,QAAQ,EACRC,MAAO,UACPC,KAAM,IAGVC,OAAQ,CACNC,MAAO,IACPC,QAAQ,CACNL,QAAQ,EACRM,WAAY,MAGhBC,KAAM,CACJC,MAAM,IAGVC,cAAe,CACbC,OAAO,CACLC,QAAS,CACPX,QAAQ,EACRY,KAAM,WAqDClB,E,YA9Cb,aAAc,IAAD,8BACX,+CAMFT,cAAgB,SAAC4B,GACf,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAOZ,SARxB,EAWblB,eAAgB,WACd,EAAK4B,SAAS,CAACvB,SAAU,EAAK0B,MAAMF,QACpCvB,EAAI0B,OACDC,QACC1B,IAAS2B,kBACT,EAAKH,MAAMF,OACZM,MACD,SAASC,GACHC,QAAQC,IAAIF,EAASG,QAAQ,GAAGC,KAAKC,QAAQ,GAAGC,YAAYC,iBAEpE,SAASC,QAnBT,EAAKb,MAAQ,CACXF,MAAO,GACPxB,SAAU,IAJD,E,sEA4BX,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,CAAW0D,UAAU,YAAYC,OAAQpC,IACzC,yBAAKvB,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeY,cAAegD,KAAKhD,cAAeC,eAAgB+C,KAAK/C,iBACvE,kBAAC,EAAD,CAAiBK,SAAU0C,KAAKhB,MAAM1B,YAExC,mC,GAvCU2C,aChCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.cc6151c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoImage.23055e65.png\";","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p className='f3 link dim white underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\nimport LogoImage from './LogoImage.png';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 45 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa1\">\r\n                    <img style={{paddingTop: '5px'}} alt='logo' src={LogoImage}/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\n\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className='white f2'>\r\n                {'Your current rank is'}\r\n            </div>\r\n            <div className='white f1'>\r\n                {'#5'}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\r\n    return (\r\n        <div>\r\n            <p className='textP f2'>\r\n                {'Detecting faces on your photo.'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br4 shadow-5'>\r\n                    <input className='center f4 pa2 br3 w-70' type='text'  onChange={onInputChange} />\r\n                    <button className='center w-25 grow f4 br3 link ph3 pv2 dib white bg-light-purple'\r\n                    onClick={onButtonSubmit}\r\n                    >Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\n\r\n\r\nconst FaceRecognition = ({imageURL}) => {\r\n    return (\r\n        <div className='center'>\r\n            <img className='image mt2' alt='' src={imageURL} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React, {Component} from 'react';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport Rank from './Components/Rank/Rank';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport 'tachyons';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'\n\nconst app = new Clarifai.App({\n  apiKey: '308c0465acc8444881aeb17341641f49'\n });\nconst particlesOptions = {\n  particles: {\n    line_linked: {\n      shadow: {\n        enable: true,\n        color: \"#3CA9D1\",\n        blur: 4\n      }\n    },\n    number: {\n      value: 100,\n      density:{\n        enable: true,\n        value_area: 1000\n      }\n    },\n    move: {\n      speed:3\n    }\n  },\n  interactivity: {\n    events:{\n      onclick: {\n        enable: true,\n        mode: 'push'\n        }\n      }\n  } \n};\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageURL: ''\n    }\n  }\n  onInputChange = (event) => {\n    this.setState({input: event.target.value})\n  }\n\n  onButtonSubmit =() => {\n    this.setState({imageURL: this.state.input});\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL, \n        this.state.input)\n      .then(\n      function(response) {\n            console.log(response.outputs[0].data.regions[0].region_info.bounding_box);\n          },\n    function(err) {\n      // there was an error\n    }\n  );\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Particles classname='particles' params={particlesOptions}/>\n        <div className='test'>\n          <Navigation />\n          <Logo />\n          <Rank />\n          <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n          <FaceRecognition imageURL={this.state.imageURL}/>\n        </div>\n        <div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}